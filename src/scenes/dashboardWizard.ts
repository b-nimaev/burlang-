import { Composer, Scenes, Markup } from "telegraf";
import { MyContext } from "../types/MyContext";
import { sendOrEditMessage } from "..";

// –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Wizard-—Å—Ü–µ–Ω—ã
interface WizardState {
  language?: string;
  suggestion?: boolean;
  selectedWordId?: string; // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è _id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  selectedDialect?: string;
  normalized_text?: string;
}

// –ú–∞—Å—Å–∏–≤ –±—É—Ä—è—Ç—Å–∫–∏—Ö –¥–∏–∞–ª–µ–∫—Ç–æ–≤
// const dialects = [
//   { value: "khori", label: "–•–æ—Ä–∏–Ω—Å–∫–∏–π" },
//   { value: "bulagat", label: "–ë—É–ª–∞–≥–∞—Ç—Å–∫–∏–π" },
//   { value: "sartul", label: "–°–∞—Ä—Ç—É–ª—å—Å–∫–∏–π" },
//   { value: "unknown", label: "–ù–µ –∑–Ω–∞—é" },
// ];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞
// async function postRequest(url: string, body: object, token: string) {
//   return fetch(url, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       Authorization: `Bearer ${token}`,
//     },
//     body: JSON.stringify(body),
//   });
// }

// –°—Ü–µ–Ω–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
const dashboardWizard = new Scenes.WizardScene<
  MyContext & { wizard: { state: WizardState } }
>(
  "dashboard-wizard",
  new Composer<MyContext>(),

  // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
  async (ctx): Promise<void> => {
    if (ctx.message && "text" in ctx.message) {
      const userInput = ctx.message.text;
      const language = ctx.wizard.state.language;

      if (language) {
        await ctx.reply(
          `–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${userInput}" —Å ${language}: ${userInput}`
        );
      } else {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
      }

      ctx.scene.enter("dictionary-wizard"); // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ü–µ–Ω–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      return 
    } else {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
      return
    }
  }
);

const greetingMessage = `<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>`
const dashboardKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", "about")],
  // [Markup.button.callback("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "home")],
  [Markup.button.callback("–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "home")],
  [Markup.button.callback("üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –Ω–∞–º–∏", "home")],
  [
    Markup.button.callback("–ì–ª–∞–≤–Ω–∞—è", "home"),
    Markup.button.url("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "https://t.me/frntdev"), // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  ],
]);

dashboardWizard.action(`about`, async (ctx: MyContext) => {
  try {

    ctx.answerCbQuery()

  } catch (error) {
    console.log(error)
  }
})

// –£–±–∏—Ä–∞–µ–º `ctx.wizard.next()` –∏–∑ `enter`
dashboardWizard.enter(async (ctx) => {
  sendOrEditMessage(ctx, `${greetingMessage}`, dashboardKeyboard);
});

dashboardWizard.action("home", async (ctx) => {
  console.log(ctx.wizard.state.language);
  ctx.scene.enter("home");
});

export default dashboardWizard;
